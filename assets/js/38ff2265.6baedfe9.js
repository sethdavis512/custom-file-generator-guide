"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[261],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=o.createContext({}),s=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):p(p({},t),e)),n},c=function(e){var t=s(e.components);return o.createElement(l.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),m=s(n),d=a,f=m["".concat(l,".").concat(d)]||m[d]||u[d]||r;return n?o.createElement(f,p(p({ref:t},c),{},{components:n})):o.createElement(f,p({ref:t},c))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,p=new Array(r);p[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[m]="string"==typeof e?e:a,p[1]=i;for(var s=2;s<r;s++)p[s]=n[s];return o.createElement.apply(null,p)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7983:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>p,default:()=>u,frontMatter:()=>r,metadata:()=>i,toc:()=>s});var o=n(7462),a=(n(7294),n(3905));const r={},p="Plop",i={unversionedId:"foundation/plop",id:"foundation/plop",title:"Plop",description:"Time to make a plopfile - for the next few steps, I'm going to take a more granular approach. Each step will add to the same chunk of code which will end up being the full plopfile code. Let's make the file:",source:"@site/docs/foundation/plop.md",sourceDirName:"foundation",slug:"/foundation/plop",permalink:"/custom-file-generator-guide/docs/foundation/plop",draft:!1,editUrl:"https://github.com/sethdavis512/custom-file-generator-guide/tree/main/docs/foundation/plop.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Setup",permalink:"/custom-file-generator-guide/docs/foundation/setup"},next:{title:"Templates",permalink:"/custom-file-generator-guide/docs/foundation/templates"}},l={},s=[],c={toc:s},m="wrapper";function u(e){let{components:t,...n}=e;return(0,a.kt)(m,(0,o.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"plop"},"Plop"),(0,a.kt)("p",null,"Time to make a plopfile - for the next few steps, I'm going to take a more granular approach. Each step will add to the same chunk of code which will end up being the full ",(0,a.kt)("inlineCode",{parentName:"p"},"plopfile")," code. Let's make the file:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"touch plopfile.js\n")),(0,a.kt)("p",null,"For starters, you'll need to export a default function with ",(0,a.kt)("inlineCode",{parentName:"p"},"plop")," as an argument. In ",(0,a.kt)("inlineCode",{parentName:"p"},"plopfile.js"),", add:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="plopfile.js"',title:'"plopfile.js"'},"export default function (plop) {\n    // ...\n}\n")),(0,a.kt)("p",null,"Plop has a method called ",(0,a.kt)("inlineCode",{parentName:"p"},"setGenerator"),". It takes an array of ",(0,a.kt)("inlineCode",{parentName:"p"},"prompts")," and an array ",(0,a.kt)("inlineCode",{parentName:"p"},"actions"),". Based on the answers from the ",(0,a.kt)("inlineCode",{parentName:"p"},"prompts")," you will get a customized output. Here we'll create our first generator, called ",(0,a.kt)("inlineCode",{parentName:"p"},"ts-component"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="plopfile.js"',title:'"plopfile.js"'},"export default function (plop) {\n    plop.setGenerator('ts-component', {\n        description: 'A React component and unit test written in Typescript',\n        prompts: [],\n        actions: []\n    });\n}\n")),(0,a.kt)("p",null,"Remember when ",(0,a.kt)("inlineCode",{parentName:"p"},"inquirer")," was mentioned earlier? Here's where we'll use our ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/SBoudrias/Inquirer.js#prompt"},"inquirer prompt types"),". We'll be needing a ",(0,a.kt)("inlineCode",{parentName:"p"},"name")," for our component, so add an ",(0,a.kt)("inlineCode",{parentName:"p"},"input")," prompt to our array of prompts, like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="plopfile.js"',title:'"plopfile.js"'},"export default function (plop) {\n    plop.setGenerator('ts-component', {\n        description: 'A React component and unit test written in Typescript',\n        prompts: [\n            {\n                type: 'input',\n                name: 'name',\n                message: 'Component name'\n            }\n        ],\n        actions: []\n    });\n}\n")),(0,a.kt)("p",null,"Next, we need to add an action. Plop has a few to choose from and for this tutorial, we'll be using the ",(0,a.kt)("a",{parentName:"p",href:"https://plopjs.com/documentation/#addmany"},(0,a.kt)("inlineCode",{parentName:"a"},"addMany")," action"),". As the names suggests, it will add multiple files to the ",(0,a.kt)("inlineCode",{parentName:"p"},"destination")," that we give it."),(0,a.kt)("p",null,"Add an object to the actions array, give it a ",(0,a.kt)("inlineCode",{parentName:"p"},"type")," of ",(0,a.kt)("inlineCode",{parentName:"p"},"addMany"),". For ",(0,a.kt)("inlineCode",{parentName:"p"},"destination")," we'll use ",(0,a.kt)("inlineCode",{parentName:"p"},"${process.cwd()}/{{ pascalCase name }}"),". This little string will point to the folder where the command was executed and create a folder with the ",(0,a.kt)("inlineCode",{parentName:"p"},"name")," of your component in pascal case. The next key is the ",(0,a.kt)("inlineCode",{parentName:"p"},"templateFiles")," which we have not created yet, go ahead and add it anyway. Lastly is the ",(0,a.kt)("inlineCode",{parentName:"p"},"base")," key which chops the namespace to whatever you like (",(0,a.kt)("a",{parentName:"p",href:"https://plopjs.com/documentation/#addmany"},"see here for more"),")."),(0,a.kt)("p",null,"Your plopfile should now look like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="plopfile.js"',title:'"plopfile.js"'},"export default function (plop) {\n    plop.setGenerator('ts-component', {\n        description: 'A React component and unit test written in Typescript',\n        prompts: [\n            {\n                type: 'input',\n                name: 'name',\n                message: 'Component name'\n            }\n        ],\n        actions: [\n            {\n                type: 'addMany',\n                destination: `${process.cwd()}/{{ pascalCase name }}`,\n                templateFiles: 'plop-templates/ts-component',\n                base: 'plop-templates/ts-component'\n            }\n        ]\n    });\n}\n")))}u.isMDXComponent=!0}}]);