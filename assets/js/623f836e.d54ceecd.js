"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[42],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=s(n),d=r,f=u["".concat(p,".").concat(d)]||u[d]||m[d]||o;return n?a.createElement(f,l(l({ref:t},c),{},{components:n})):a.createElement(f,l({ref:t},c))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=d;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[u]="string"==typeof e?e:r,l[1]=i;for(var s=2;s<o;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2113:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>s});var a=n(7462),r=(n(7294),n(3905));const o={},l="Templates",i={unversionedId:"foundation/templates",id:"foundation/templates",title:"Templates",description:"Here is where all of our templats are going to live. From the root, run:",source:"@site/docs/foundation/templates.md",sourceDirName:"foundation",slug:"/foundation/templates",permalink:"/custom-file-generator-guide/docs/foundation/templates",draft:!1,editUrl:"https://github.com/sethdavis512/custom-file-generator-guide/tree/main/docs/foundation/templates.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Plop",permalink:"/custom-file-generator-guide/docs/foundation/plop"},next:{title:"npm link",permalink:"/custom-file-generator-guide/docs/foundation/link"}},p={},s=[],c={toc:s},u="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"templates"},"Templates"),(0,r.kt)("p",null,"Here is where all of our templats are going to live. From the ",(0,r.kt)("inlineCode",{parentName:"p"},"root"),", run:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir plop-templates\n")),(0,r.kt)("p",null,"I personally like having a folder for each of my generators. That way when I use ",(0,r.kt)("inlineCode",{parentName:"p"},"addMany"),' I can have the entire folder "copied" instead of individually adding single files with the ',(0,r.kt)("inlineCode",{parentName:"p"},"add")," action."),(0,r.kt)("p",null,"Inside of the ",(0,r.kt)("inlineCode",{parentName:"p"},"plop-templates")," directory, make a ",(0,r.kt)("inlineCode",{parentName:"p"},"ts-component")," directory:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir ts-component\n")),(0,r.kt)("p",null,"Let's make some ts-component template files. While in the ",(0,r.kt)("inlineCode",{parentName:"p"},"ts-component")," directory, run:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"touch index.ts.hbs\n")),(0,r.kt)("p",null,"Here's our first usage of the ",(0,r.kt)("inlineCode",{parentName:"p"},"handlebars")," (",(0,r.kt)("a",{parentName:"p",href:"https://handlebarsjs.com/"},"docs"),") template. The ",(0,r.kt)("inlineCode",{parentName:"p"},".hbs")," extension will be removed once we run the action. Inside ",(0,r.kt)("inlineCode",{parentName:"p"},"index.ts.hbs"),", add:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"export { default } from './{{ pascalCase name }}';\n")),(0,r.kt)("p",null,'This file is more of a personal preference, sometimes called a "barrel" file. It allows you to write imports a little cleaner. Instead of having ',(0,r.kt)("inlineCode",{parentName:"p"},"../components/Button/Button")," be your import, you can just write ",(0,r.kt)("inlineCode",{parentName:"p"},"../components/Button"),"."),(0,r.kt)("p",null,"Next we're going to use a funky file name that plop will use to create our unique file name:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'touch "{{ pascalCase name }}.tsx.hbs"\n')),(0,r.kt)("p",null,"In the ",(0,r.kt)("inlineCode",{parentName:"p"},"{{ pascalCase name }}.tsx.hbs"),", let's drop some Handlbar syntax into our component template file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="{{ pascalCase name }}.tsx.hbs"',title:'"{{',pascalCase:!0,name:!0,'}}.tsx.hbs"':!0},"import React from 'react';\n\nexport default function {{ pascalCase name }}({ children }): JSX.Element {\n    return <div>{children}</div>;\n}\n\n")),(0,r.kt)("p",null,"Again, you'll see ",(0,r.kt)("inlineCode",{parentName:"p"},"pascalCase")," added. That's a plop ",(0,r.kt)("a",{parentName:"p",href:"https://plopjs.com/documentation/#case-modifiers"},"case modifier")," - I recommend checking them out if you have different preferences."),(0,r.kt)("p",null,"If you'd like to see example repo, feel free to copy/clone ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/sethdavis512/jarvis"},"this example"),"."))}m.isMDXComponent=!0}}]);